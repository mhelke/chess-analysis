# Name: Matthew Helke
# Date: April 1st, 2020
#
# VERSION INFO:
# 0.1.0 - Release April 1st - Downloads one month - initial release
# 0.2.0 - Release April 3rd - Supports Multiple Months
# 0.2.1 - Patched April 3rd - List & Data Frame Grabbing Fix
# 0.2.2 - Patched April 4th - Row Names Fixed
# 0.2.3 - Patched April 4th - Columns updated to support months without certain
  # types of games played in that month.
#
#
#
#
#
#
#
# Description: Function to clean data and output a table of chess games given an
# input from the chess.com API
#
# Output: A table with information about chess.com chess games for a given player in a given
# month and year
#
# Inputs: 3 Strings. Chess.com username, year with YYYY format, and month with MM format
# Note: The user must be a member on chess.com and have games played in the given time frame

test <- chess_data("mastermatthew52", 2017, 3, 3)

chess_data <- function(username, year, month, nmonths) {

library(tidyverse)
library(ggplot2)
library(jsonlite)
library(bigchess)

# Testing purposes #
#username <- "mastermatthew52"
#year = 2020
#month = 1
#nmonths = 3

# make a  copy of nmonths for use in loops
n = nmonths


chess_PGN_data <- vector(mode = "list", n+1)
chess_data <- vector(mode = "list", n+1)
jsonData <- vector(mode = "list", n+1)
JSON_url <- vector(mode = "list", n+1)


if (!is.null(nmonths) & nmonths != 1){

  i = 1;
  while (nmonths!=0) {

    if(month == 13) {month = 1; year = year + 1}
    if(month < 10){
      JSON_url[i] <- paste0("https://api.chess.com/pub/player/", username, "/games/", year, "/0", month,
                         sep = "", collapse = NULL)
      JSON_pgn_url[i] <- paste0("https://api.chess.com/pub/player/", username, "/games/", year, "/0", month,
                             "/pgn", sep = "", collapse = NULL)

    }else{
      JSON_url[i] <- paste0("https://api.chess.com/pub/player/", username, "/games/", year, "/", month,
                         sep = "", collapse = NULL)
      JSON_pgn_url[i] <- paste0("https://api.chess.com/pub/player/", username, "/games/", year, "/", month,
                             "/pgn", sep = "", collapse = NULL)

    } # end else months >= 10

    month <- month + 1;
    nmonths <- nmonths - 1;
    i <- i + 1;
}

}else {
if(month < 10){
  JSON_url[i] <- paste0("https://api.chess.com/pub/player/", username, "/games/", year, "/0", month,
                     sep = "", collapse = NULL)
  JSON_pgn_url[i] <- paste0("https://api.chess.com/pub/player/", username, "/games/", year, "/0", month,
                         "/pgn", sep = "", collapse = NULL)

}else{
  JSON_url[i] <- paste0("https://api.chess.com/pub/player/", username, "/games/", year, "/", month,
                     sep = "", collapse = NULL)
  JSON_pgn_url[i] <- paste0("https://api.chess.com/pub/player/", username, "/games/", year, "/", month,
                         "/pgn", sep = "", collapse = NULL)

} # end else months >= 10
} # end else





# Now the function should be able to grab multiple months out of the newly created vector




# Class is a list which needs to be transformed
class(jsonData[1])


# I need to extract the  data  from the games variable as right now it is the
# only variable and inside of that there is the list I need. I will save it here
names(jsonData[1])




# Load JSON data provided via chess.com API

i <- 1
while(i <= n) {

  # flatten will make any nested data "flat" or it's own colum
  jsonData[i] <- fromJSON(toString(JSON_url[i]), flatten = TRUE)
  chess_PGN_data[[i]] <- read.pgn(toString(JSON_pgn_url[i]), add.tags = c("ECO", "Link"))
  i <- i + 1

}


i <- 1

while(i <= n){
  # Added row name argument (problem explained below)
  chess_PGN_data_temp <- as.data.frame(chess_PGN_data[[i]], row.names = NULL)
  chess_data_temp <- as.data.frame(jsonData[[i]], row.names= NULL)

  # The URL needs to be renamed
  chess_PGN_data_temp  <- chess_PGN_data_temp %>%
    rename(url = Link)

  # I had to take these off because in some months people may not have played
  # certain types of games meaning that column would be dropped.
  # more can be found out on the chess.com API page

  chess_data_temp <- chess_data_temp %>%
    mutate(match = NA) %>%
    mutate(tournament = NA) %>%
    mutate(start_time = NA)

  if(i==1){
    chess <- chess_data_temp
  }else{

  # The columns  are not lining up it looks like. Try to select them
  # EDIT: That did not work. The problem was some of the  month JSON files did not
    # Include the match column... I can bring that up in the dev group
    #Therefore these next lines are not needed and would not work anyways
  #chess <- chess %>%
  #select(url, pgn, time_control, start_time, end_time, rated, fen, start_time,
  #       time_class, rules, white, black, tournament)

  #chess_data_temp <- as_tibble(chess_data_temp) %>%
  #select(url, pgn, time_control, start_time, end_time, rated, fen, start_time,
  #      time_class, rules, white, black, tournament)


  # The problem is that the row names are no unique for the rbind to work
  # EDIT: The problem can be resolved with the as.data.frame(x, row.names = NULL)
    # This prevents R from making row names and this wil make the rbind work.
  # make.row.names will prevent the function from making row names -
    # This seems like a good idea just incase with all the above problems

  chess <- chess %>%
    rbind(chess_data_temp, make.row.names = FALSE)
  }

  chess_PGN_data_full <- chess_PGN_data_temp %>%
    rbind(chess_PGN_data_temp, make.row.names = FALSE)

  i <- i + 1


}

###################################################
##################################################
# this isn't working --
# instead lests  try to make a ton of tibbles separately (NOT IN LISTS) and try
# to make the loops EDIT: I used data frames becasue of the row name issue work
# with them instead... it'll take up a lot of memory but that is why we will
# limit the number of months to 12 maybe to make a year.... EDIT: This can be
# solved by "recycling" -- is that what you call it? -- the variables That is why
# I created so many temp variables - I didn't want to use up too much memory and
# hopefully it makes things run smoother
###################################################
###################################################







#
# # Make initial chess dataset
# chess <- chess_data[1]
#
# # combine them in there is more than one
# if(n > 1) {
#   i <- 2
#   while (n!=0) {
#     chess %>%
#       rbind(chess_data[i])
#     n <- n - 1
#     i <- i + 1
#   }
# }



# Looks much better and easier to see the data I need.


### Variable to work with: ###

# url: Provides a URL to the online game stored in the user's archive
# pgn: "Portable Game Notation" - A way of recording a game's details and moves
  # so that it can be loaded later on.
# time_control: the time control used in the game (in seconds)
# end_time: timestamp of the end time of the game -- unrelated to time_control
# rated: boolean value stating if the game was rated or not
# fen: "Forsyth-Edwards Notation": Used to describe a particular position on a
  # chess board. This can be used to view a position at any given time throughout
  # a chess game. In this case we  have the ending fen.
# time_class: what class of time control was use: (i.e. game with time_control
  # under 2|1 are considered "bullet" games)
# rules: What type  of chess is being played. There are many variations
# white & black:
  # Username of who is playing what side
  # rating of  each player
  # result of the game: result of who won/lost and how
  # @id: url of player's profile on chess.com
#start_time: timestamp of the game start (only applys to time_class "Daily")
# tournament: url pointing to the tournament the game was part of if applicable
# match: url point to the team match the game was a part of if applicable


# Join the PGN and Chess tables by the unique URL
chess <- chess %>%
  inner_join(chess_PGN_data_full, by = "url")

# It worked! 1st try after sorting out the row name problem which took a while




##########################################################
############### ORIGINAL CODE STARTS HERE  ###############
##########################################################




### Structure of Data ###

# glimpse(chess)




##### CLEANING THE DATA #####


# The pgn is very messy, but it could be useful to have once it is cleaned up
# The Completed Games  (ref: https://www.chess.com/news/view/published-data-api)
# Claims there is an ECO (Encycopedia of Chess Openings) code to  find out
# what openings were played in the game. Part of this analysis is going to
# be looking at different openings and win rates, etc. so it would be nice to
# have a column for them. The ECO code IS in the data, but it is hidden in
# the PGN (A PGN typically has the ECO code for reference)
# I will need to extract that manually.


# I found  a nice library called bigchess:
  # (ref: https://rdrr.io/cran/bigchess/man/read.pgn.html)
# This library can be used to read a PGN file and turn it into a data frame.
# This makes it easy to extract data
# from a pgn file. ECO is an option to extract

# library(bigchess)
#
# # Make this more dynamic
#
# JSON_pgn_url <- paste0("https://api.chess.com/pub/player/", username, "/games/", year, "/", month,
#                        "/pgn", sep = "", collapse = NULL)
#
#
# chess_PGN_data <- read.pgn(JSON_pgn_url, add.tags = c("ECO", "Link"))
#
#
# # Now I need to join this new PGN table to the original chess table.
#
# chess_PGN_data <- as_tibble(chess_PGN_data)
#
# # I need to have a column to join the tables on. I have the unique URL in
# # the chess_data table, and I have the Link in the chess_PGN_data which I
# # Specified to be added. I can use these 2 columns  to create a unique ID
# # to join the PGN data to the game data.
#
# # Check to be sure the url is unique
# chess  %>% count(url, sort = TRUE) %>% head()
#
# # it is. The tables both have a way to reference eachother
#
# chess_PGN_data <- chess_PGN_data %>%
#   rename(url = Link)

# chess <- chess %>%
#   inner_join(chess_PGN_data, by = "url")


# Now I can remove variables that will not be needed:
# PGN is no longer needed it becasue it was attached to the table
# End time does not give useful information
# Rated is always TRUE becasue I only play rated games
# Start_time, tournament, match, and event do not provide much information
# Event and Site are also irrelevant and mostly the same






##########################################################
################ ORIGINAL CODE ENDS HERE  ################
##########################################################



##### Start creating the table  #####

# NOTE: I originally made this function for my personal use on one month
# I did not need many columns which I personally found worthless
# due  to them not applying to my games.
# I WILL be adding them to the output of the function becuse they may apply to
# someone else's games, or maybe mine in the future.

# Original package code will be marked with"

#*#*#*#*# Original Code #*#*#*#*#

# New code will be marked with:

#*#*#*#*# Updated Code #*#*#*#*#




#*#*#*#*# Original Code #*#*#*#*#

# chess <- chess %>%
#   select(-pgn, -end_time, -rated, -start_time, -tournament,
#          -match, -Event, -Site)

# For this project I will disregard "daily" match games. There are 3
# These are far more serious matches and can be looked at all together later

# I only want standard chess game rules, so all variants cant get thrown out
# too
#Move text is not needed, the moves are not relevant in this analysis.
# In some cases, it might be, so this column may have use elesewhere, but not
# with this project.

# chess <- chess %>%
#   select(-Movetext)

# For this project I will disregard "daily" match games. There are 3 of them
# These are far more serious matches and can be looked at all together later

# I only want standard chess game rules, so all variants cant get thrown out
# too (any time rules isn't "chess")


# chess <- chess %>%
#   filter(time_class != "daily" & time_class != "rapid") %>%
#   filter(rules == "chess")
#
# # This means rules column can get removed as they are all chess
# # I also noticed round is not needed either
#
# chess <- chess %>%
#   select(-rules, -Round)

# I decided to keep the FEN, becasue it could be useful. The chess.com API
# already provides end of game data, which makes things easier though.

# I noticed that there was not a column for who won. The data is there in the result
# column, but it shows who won as in white or black, not which player won. The
# columns saying how the game ended also tell this information but do not make it
# clear who won. I will create this column.





#*#*#*#*# Updated Code #*#*#*#*#

# I like working with tibbles, so chess should be a tibble

chess <- as_tibble(chess)

# better.


# Remove columns that are not needed:
# NOTE: I will be adding some of these columns availible later on as options


# end_time and start_time are unneeded - they don't offer helpful info
# site is always chess.com becasue it is a chess.com API -- The data
  # is only there becasue "site" is a part of a PGN
# I am deciding to keep move text this time becasue it could be helpful. I might make
# it an option later on.
# The reason for keeping it over the PGN is because the PGN includes redundant data
# which can be found in other columns for the table. Move text is only the moves

chess <- chess %>%
     select(-end_time, -start_time, -Site, -pgn)
# 4 columns were removed


##### Create New, Informative Columns #####

# Column for who won the game

chess <- chess %>%
  mutate(winner = if_else(Result == "1/2-1/2", "Draw", "")) %>%
  mutate(winner = if_else(Result == "1-0", White, winner)) %>%
  mutate(winner = if_else(Result == "0-1", Black, winner))


# Column for how the game was won (i.e. checkmate, timeout, resign, draw)

#*#*#*# Original Code #*#*#*#

# chess <- chess %>%
#   mutate(ending = if_else(Result == "1/2-1/2", "Draw", "")) %>%
#   mutate(ending = if_else(Result == "1-0", chess$black$result, ending)) %>%
#   mutate(ending = if_else(Result == "0-1", chess$white$result, ending))


#*#*#*# Updated Code #*#*#*#

# Remember, I changed the fromJSON argument to be flatten = TRUE. The above code had
# the option as the default FALSE. This means that the data frame "white" and "black"
# were nested inside of chess. That is why double $ notation was needed.
# The following code just made variables called: white.[column in white]

chess <- chess %>%
  mutate(ending = if_else(Result == "1/2-1/2", "Draw", "")) %>%
  mutate(ending = if_else(Result == "1-0", chess$black.result, ending)) %>%
  mutate(ending = if_else(Result == "0-1", chess$white.result, ending))

# Clear up the confusing white and black columns and separate them:

# The usernames are not needed becasue they appear later in the table
# The results now appear later with the 2 columns created above
# The id is not needed for each username  (they can be looked up if they're wanted)
# The only thing that would be helpful to save are the ratings of each player
# --> Move these to a new column and get rid of the white/black columns


#*#*#*# Original Code #*#*#*#

# chess <- chess %>%
#   mutate(white_rating = chess$white$rating) %>%
#   mutate(black_rating = chess$black$rating) %>%
#   select(-white, -black)

#*#*#*# Updated Code #*#*#*#

# Same problem as the last segment
# also the select argument is different becasue whit eand black were a single colum in
# the original code. I dropped  the whole table of worthless information.
# I will have to do it differently this time

chess <- chess %>%
  mutate(white_rating = chess$white.rating) %>%
  mutate(black_rating = chess$black.rating) %>%
  select(-`white.@id`, -`black.@id`, -white.result, -black.result, -white.username,
         -black.username, -white.rating, -black.rating)



# The last step is to reorder the columns to make more sense logically
  # i.e. putting the ratings  by the usernames not at the end.

chess <- chess %>%
  select(url, Date, time_control, time_class, White, white_rating,
         Black, black_rating, ECO, Result, winner, ending, fen, NMoves,
         W1, B1, W2, B2, W3, B3, W4, B4, W5, B5, W6, B6, W7, B7, W8, B8, W9,
         B9, W10, B10, last.move, W_B_moves, W_K_moves, W_N_moves, W_O_moves,
         W_Q_moves, W_R_moves, B_B_moves, B_K_moves, B_N_moves, B_O_moves,
         B_Q_moves, B_R_moves, B_moves, K_moves, N_moves, O_moves,
         Q_moves, R_moves)



return(chess)

}




